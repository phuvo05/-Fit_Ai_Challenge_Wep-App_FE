# Script deploy nhanh l√™n S3 v√† invalidate CloudFront
# D√πng cho deployment th·ªß c√¥ng

$BucketName = "fit-ai-challenge-frontend"
$AppPath = "FIT_AI_Challenge_WEP\APP_FE"

Write-Host "=== Deploy Frontend to AWS ===" -ForegroundColor Cyan

# Build
Write-Host "`nüì¶ Building..." -ForegroundColor Yellow
Set-Location $AppPath
npm run build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Build failed!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Build completed!" -ForegroundColor Green

# Deploy to S3
Write-Host "`nüöÄ Deploying to S3..." -ForegroundColor Yellow
aws s3 sync dist/ s3://$BucketName --delete

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Deploy failed!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Deployed to S3!" -ForegroundColor Green

# Invalidate CloudFront cache (n·∫øu c√≥)
$CloudFrontInfoPath = "..\..\cloudfront-info.json"
if (Test-Path $CloudFrontInfoPath) {
    $CloudFrontInfo = Get-Content $CloudFrontInfoPath | ConvertFrom-Json
    $DistId = $CloudFrontInfo.DistributionId
    
    Write-Host "`nüîÑ Invalidating CloudFront cache..." -ForegroundColor Yellow
    aws cloudfront create-invalidation --distribution-id $DistId --paths "/*" | Out-Null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ CloudFront cache invalidated!" -ForegroundColor Green
        Write-Host "`nüåê Website: https://$($CloudFrontInfo.DomainName)" -ForegroundColor Cyan
    } else {
        Write-Host "‚ö†Ô∏è  CloudFront invalidation failed (c√≥ th·ªÉ do thi·∫øu quy·ªÅn)" -ForegroundColor Yellow
    }
} else {
    Write-Host "`n‚ö†Ô∏è  CloudFront ch∆∞a ƒë∆∞·ª£c setup. Website c√≥ s·∫µn t·∫°i:" -ForegroundColor Yellow
    Write-Host "   http://$BucketName.s3-website-ap-southeast-1.amazonaws.com" -ForegroundColor Cyan
}

Write-Host "`n‚ú® Deploy ho√†n t·∫•t!" -ForegroundColor Green
Set-Location ..\..
